// <auto-generated />
using System;
using CHStore.Application.Sales.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CHStore.Application.Sales.Infra.Migrations
{
    [DbContext(typeof(SalesContext))]
    [Migration("20201014180747_ChangeCustomerTableName")]
    partial class ChangeCustomerTableName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.Voucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FL_Active")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<double>("DiscountPercentage")
                        .HasColumnName("DiscountPercentage")
                        .HasColumnType("FLOAT");

                    b.Property<DateTime>("FinalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FinalDate")
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2020, 10, 14, 15, 7, 47, 248, DateTimeKind.Local).AddTicks(5223));

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InitialDate")
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2020, 10, 14, 15, 7, 47, 247, DateTimeKind.Local).AddTicks(5091));

                    b.HasKey("Id");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("VoucherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("FreightPrice")
                        .HasColumnName("FreightPrice")
                        .HasColumnType("FLOAT");

                    b.Property<int>("PaymentMethod")
                        .HasColumnName("PaymentMethod")
                        .HasColumnType("BIGINT");

                    b.Property<double>("ProductsPrice")
                        .HasColumnName("ProductsPrice")
                        .HasColumnType("FLOAT");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RequestDate")
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2020, 10, 14, 15, 7, 47, 256, DateTimeKind.Local).AddTicks(7484));

                    b.Property<double>("TotalPrice")
                        .HasColumnName("TotalPrice")
                        .HasColumnType("FLOAT");

                    b.Property<long>("TransportCompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VoucherId")
                        .IsUnique();

                    b.HasIndex("TransportCompanyId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Mount")
                        .HasColumnType("BIGINT");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateModified")
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2020, 10, 14, 15, 7, 47, 257, DateTimeKind.Local).AddTicks(5053));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderStatus")
                        .HasColumnName("OrderStatus")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.TransportCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FL_Active")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnName("ApiUrl")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnName("CNPJ")
                        .HasColumnType("VARCHAR(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("TrackingUrl")
                        .IsRequired()
                        .HasColumnName("TrackingUrl")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnName("SiteUrl")
                        .HasColumnType("VARCHAR(500)");

                    b.HasKey("Id");

                    b.ToTable("TransportCompany");
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.Order", b =>
                {
                    b.HasOne("CHStore.Application.Sales.Domain.Entities.Voucher", "Voucher")
                        .WithOne("Order")
                        .HasForeignKey("CHStore.Application.Sales.Domain.Entities.Order", "VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHStore.Application.Sales.Domain.Entities.TransportCompany", "TransportCompany")
                        .WithOne("Order")
                        .HasForeignKey("CHStore.Application.Sales.Domain.Entities.Order", "TransportCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHStore.Application.Sales.Domain.Entities.Customer", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("CHStore.Application.Sales.Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHStore.Application.Sales.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.Status", b =>
                {
                    b.HasOne("CHStore.Application.Sales.Domain.Entities.Order", "Order")
                        .WithMany("Status")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CHStore.Application.Sales.Domain.Entities.TransportCompany", b =>
                {
                    b.OwnsOne("CHStore.Application.Core.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("TransportCompanyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<TimeSpan>("ClosingTime")
                                .HasColumnName("ClosingTime")
                                .HasColumnType("TIME");

                            b1.Property<string>("Complement")
                                .HasColumnName("Complement")
                                .HasColumnType("VARCHAR(100)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnName("Number")
                                .HasColumnType("VARCHAR(15)");

                            b1.Property<TimeSpan>("OpeningTime")
                                .HasColumnName("OpeningTime")
                                .HasColumnType("TIME");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnName("Street")
                                .HasColumnType("VARCHAR(300)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnName("ZipCode")
                                .HasColumnType("VARCHAR(16)");

                            b1.HasKey("TransportCompanyId");

                            b1.ToTable("TransportCompany");

                            b1.WithOwner()
                                .HasForeignKey("TransportCompanyId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
