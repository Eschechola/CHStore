// <auto-generated />
using System;
using CHStore.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CHStore.Database.Migrations
{
    [DbContext(typeof(ChContext))]
    partial class ChContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CHStore.Database.Entities.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 750, DateTimeKind.Local).AddTicks(4610));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 752, DateTimeKind.Local).AddTicks(4208));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Brand", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 758, DateTimeKind.Local).AddTicks(4662));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 758, DateTimeKind.Local).AddTicks(4904));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Category", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("fl_active");

                    b.Property<string>("CNH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("cnpj");

                    b.Property<string>("CPF")
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 761, DateTimeKind.Local).AddTicks(659));

                    b.Property<long>("DocumentType")
                        .HasColumnType("BIGINT")
                        .HasColumnName("document_type");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("password");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 761, DateTimeKind.Local).AddTicks(1910))
                        .HasColumnName("register_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 761, DateTimeKind.Local).AddTicks(871));

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique()
                        .HasFilter("[cnpj] IS NOT NULL");

                    b.HasIndex("CPF")
                        .IsUnique()
                        .HasFilter("[cpf] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Customer", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("fl_active");

                    b.Property<string>("CPF")
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 813, DateTimeKind.Local).AddTicks(3201));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("password");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 813, DateTimeKind.Local).AddTicks(5908))
                        .HasColumnName("register_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 813, DateTimeKind.Local).AddTicks(3421));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique()
                        .HasFilter("[cpf] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Employee", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.EmployeePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 832, DateTimeKind.Local).AddTicks(1259));

                    b.Property<long>("EmployeeId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_employee_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_permission_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 832, DateTimeKind.Local).AddTicks(1554));

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PermissionId");

                    b.ToTable("EmployeePermissions", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 835, DateTimeKind.Local).AddTicks(979));

                    b.Property<long>("CustomerId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_customer_id");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("FreightPrice")
                        .HasColumnType("FLOAT")
                        .HasColumnName("freight_price");

                    b.Property<long>("PaymentMethod")
                        .HasColumnType("BIGINT")
                        .HasColumnName("payment_method");

                    b.Property<double>("ProductsPrice")
                        .HasColumnType("FLOAT")
                        .HasColumnName("products_price");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 840, DateTimeKind.Local).AddTicks(2605))
                        .HasColumnName("request_date");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("FLOAT")
                        .HasColumnName("total_price");

                    b.Property<long>("TransportCompanyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_transport_company_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 835, DateTimeKind.Local).AddTicks(1209));

                    b.Property<long>("VoucherId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_coupon_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TransportCompanyId")
                        .IsUnique();

                    b.HasIndex("VoucherId")
                        .IsUnique();

                    b.ToTable("Order", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.OrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 841, DateTimeKind.Local).AddTicks(3416));

                    b.Property<long>("Mount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("mount");

                    b.Property<long>("OrderId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_order_id");

                    b.Property<long>("ProductId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 841, DateTimeKind.Local).AddTicks(3626));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 842, DateTimeKind.Local).AddTicks(9176));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 842, DateTimeKind.Local).AddTicks(9386));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Permission", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("fl_active");

                    b.Property<long>("BrandId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_brand_id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 844, DateTimeKind.Local).AddTicks(7568));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("price");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 844, DateTimeKind.Local).AddTicks(9902))
                        .HasColumnName("register_date");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("slug");

                    b.Property<long>("Stock")
                        .HasColumnType("BIGINT")
                        .HasColumnName("stock");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 844, DateTimeKind.Local).AddTicks(7893));

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("url_image");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Product", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 848, DateTimeKind.Local).AddTicks(760));

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 848, DateTimeKind.Local).AddTicks(1284))
                        .HasColumnName("date_modified");

                    b.Property<long>("OrderId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("fk_order_id");

                    b.Property<long>("OrderStatus")
                        .HasColumnType("BIGINT")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 848, DateTimeKind.Local).AddTicks(1045));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Status", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.TransportCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("fl_active");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("api_url");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("VARCHAR(14)")
                        .HasColumnName("cnpj");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 849, DateTimeKind.Local).AddTicks(8049));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("phone");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("site_url");

                    b.Property<string>("TrackingUrl")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("tracking_url");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 849, DateTimeKind.Local).AddTicks(8261));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("TransportCompany", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Voucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("fl_active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 853, DateTimeKind.Local).AddTicks(8391));

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("FLOAT")
                        .HasColumnName("discount_percentage");

                    b.Property<DateTime>("FinalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 854, DateTimeKind.Local).AddTicks(311))
                        .HasColumnName("final_date");

                    b.Property<DateTime>("InitialDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 854, DateTimeKind.Local).AddTicks(81))
                        .HasColumnName("initial_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 7, 12, 2, 17, 25, 853, DateTimeKind.Local).AddTicks(8656));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Voucher", "chs");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Customer", b =>
                {
                    b.OwnsOne("CHStore.Database.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("BIGINT")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<TimeSpan>("ClosingTime")
                                .HasColumnType("TIME")
                                .HasColumnName("closing_time");

                            b1.Property<string>("Complement")
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("complement");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(15)")
                                .HasColumnName("number");

                            b1.Property<TimeSpan>("OpeningTime")
                                .HasColumnType("TIME")
                                .HasColumnName("opening_time");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("VARCHAR(300)")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("VARCHAR(16)")
                                .HasColumnName("zip_code");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Employee", b =>
                {
                    b.OwnsOne("CHStore.Database.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("EmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("BIGINT")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<TimeSpan>("ClosingTime")
                                .HasColumnType("TIME")
                                .HasColumnName("closing_time");

                            b1.Property<string>("Complement")
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("complement");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(15)")
                                .HasColumnName("number");

                            b1.Property<TimeSpan>("OpeningTime")
                                .HasColumnType("TIME")
                                .HasColumnName("opening_time");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("VARCHAR(300)")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("VARCHAR(16)")
                                .HasColumnName("zip_code");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employee");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CHStore.Database.Entities.EmployeePermission", b =>
                {
                    b.HasOne("CHStore.Database.Entities.Employee", "Employee")
                        .WithMany("EmployeePermissions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHStore.Database.Entities.Permission", "Permission")
                        .WithMany("EmployeePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Order", b =>
                {
                    b.HasOne("CHStore.Database.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHStore.Database.Entities.TransportCompany", "TransportCompany")
                        .WithOne("Order")
                        .HasForeignKey("CHStore.Database.Entities.Order", "TransportCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHStore.Database.Entities.Voucher", "Voucher")
                        .WithOne("Order")
                        .HasForeignKey("CHStore.Database.Entities.Order", "VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("TransportCompany");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("CHStore.Database.Entities.OrderProduct", b =>
                {
                    b.HasOne("CHStore.Database.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHStore.Database.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Product", b =>
                {
                    b.HasOne("CHStore.Database.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("fk_brand_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CHStore.Database.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CHStore.Database.ValueObjects.Size", "Size", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("BIGINT")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Depth")
                                .HasColumnType("DECIMAL")
                                .HasColumnName("depth");

                            b1.Property<decimal>("Length")
                                .HasColumnType("DECIMAL")
                                .HasColumnName("lenght");

                            b1.Property<decimal>("Width")
                                .HasColumnType("DECIMAL")
                                .HasColumnName("width");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Status", b =>
                {
                    b.HasOne("CHStore.Database.Entities.Order", "Order")
                        .WithMany("Status")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CHStore.Database.Entities.TransportCompany", b =>
                {
                    b.OwnsOne("CHStore.Database.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("TransportCompanyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("BIGINT")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<TimeSpan>("ClosingTime")
                                .HasColumnType("TIME")
                                .HasColumnName("closing_time");

                            b1.Property<string>("Complement")
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("complement");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(15)")
                                .HasColumnName("number");

                            b1.Property<TimeSpan>("OpeningTime")
                                .HasColumnType("TIME")
                                .HasColumnName("opening_time");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("VARCHAR(300)")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("VARCHAR(16)")
                                .HasColumnName("zip_code");

                            b1.HasKey("TransportCompanyId");

                            b1.ToTable("TransportCompany");

                            b1.WithOwner()
                                .HasForeignKey("TransportCompanyId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Employee", b =>
                {
                    b.Navigation("EmployeePermissions");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Permission", b =>
                {
                    b.Navigation("EmployeePermissions");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("CHStore.Database.Entities.TransportCompany", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("CHStore.Database.Entities.Voucher", b =>
                {
                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
